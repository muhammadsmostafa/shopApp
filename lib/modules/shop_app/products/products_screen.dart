import 'package:buildcondition/buildcondition.dart';import 'package:carousel_slider/carousel_slider.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:shop_app/layout/shop_app/cubit/cubit.dart';import 'package:shop_app/layout/shop_app/cubit/states.dart';import 'package:shop_app/models/shop_app/categories_model.dart';import 'package:shop_app/models/shop_app/home_model.dart';import 'package:shop_app/shared/components/components.dart';import 'package:shop_app/shared/styles/colors.dart';class ProductsScreen extends StatelessWidget {  const ProductsScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocConsumer<ShopCubit,ShopStates>(      listener: (context,state)      {        if(state is ShopSuccessChangeFavoritesState)          {            if(!state.model.status)              {                showToast(message: state.model.message, state: ToastStates.ERROR);              }          }      },      builder: (context,state)      {        return BuildCondition(          condition: ShopCubit.get(context).homeModel!=null && ShopCubit.get(context).categoriesModel!=null,          builder: (context) => productBuilder(ShopCubit.get(context).homeModel,ShopCubit.get(context).categoriesModel, context),          fallback: (context) => const Center(child: CircularProgressIndicator()),        );      },    );    }    Widget productBuilder(HomeModel? model,CategoriesModel? categoriesModel, context) =>      SingleChildScrollView(        physics: const BouncingScrollPhysics(),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [        CarouselSlider(            items: model!.data.banners.map((e) =>  Image(              image: NetworkImage('${e.image}'),              width: double.infinity,              fit: BoxFit.cover,            ),).toList(),            options: CarouselOptions(              height: 250,              initialPage: 0,              viewportFraction: 1.0,              enableInfiniteScroll: true,              reverse: false,              autoPlay: true,              autoPlayInterval: const Duration(seconds: 3),              autoPlayAnimationDuration: const Duration(seconds : 1),              autoPlayCurve: Curves.fastLinearToSlowEaseIn,              scrollDirection: Axis.horizontal,            ),        ),        const SizedBox(height: 10,),        Padding(          padding: const EdgeInsets.symmetric(            horizontal: 10,          ),          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              const Text(                'Categories',                style: TextStyle(                  fontSize: 24,                  fontWeight: FontWeight.w800,                ),              ),              SizedBox(                height: 100,                child: ListView.separated(                    scrollDirection: Axis.horizontal,                    physics: const BouncingScrollPhysics(),                    itemBuilder: (context , index) => buildCategoryItem(categoriesModel!.data.data[index]),                    separatorBuilder: (context , index) => const SizedBox(width: 10,),                    itemCount: categoriesModel!.data.data.length,                ),              ),              const SizedBox(                height: 20,              ),              const Text(                    'New Products',                    style: TextStyle(                      fontSize: 24,                      fontWeight: FontWeight.w800,                    ),                  ),            ],          ),        ),        const SizedBox(height: 10,),        Container(          color: Colors.grey[300],          child: GridView.count(            shrinkWrap: true,            physics: const NeverScrollableScrollPhysics(),            crossAxisCount: 2,            mainAxisSpacing: 1,            crossAxisSpacing: 1,            childAspectRatio: 1 / 1.55,            children: List.generate(                model.data.products.length,                    (index) => buildGridProduct(model.data.products[index], context),            ),          ),        ),          ],        ),      );  Widget buildGridProduct(ProductModel model, context) => Container(      color: Colors.white,      child: Column(    children: [      Stack(        alignment: AlignmentDirectional.bottomStart,        children: [          Container(              color: Colors.white,              child:Image(            image: NetworkImage('${model.image}'),            width: double.infinity,            height: 210,          )),          if(model.discount!=0)          Container(            padding: const EdgeInsets.symmetric(horizontal: 5),            color: Colors.red,            child: const Text(              'DISCOUNT',              style: TextStyle(                fontSize: 8,                color: Colors.white,              ),            )          ),        ],      ),      Padding(        padding: const EdgeInsets.all(12.0),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            Text(                '${model.name}',              maxLines: 2,              overflow: TextOverflow.ellipsis,              style: const TextStyle(                fontSize: 14,                height:1.3,              ),            ),            Row(              children: [                Text(                  '${model.price.round()}'' EGP',                  overflow: TextOverflow.ellipsis,                  style: const TextStyle(                    fontSize: 12,                    color: defaultColor,                  ),                ),                const SizedBox(width: 5,),                if(model.discount != 0)                  Text(                    '${model.oldPrice.round()}',                    overflow: TextOverflow.ellipsis,                    style: const TextStyle(                      fontSize: 12,                      color: Colors.grey,                      decoration: TextDecoration.lineThrough,                    ),                  ),                const Spacer(),                IconButton(                    onPressed: ()                    {                      ShopCubit.get(context).changeFavorites(model.id);                    },                    icon: CircleAvatar(                        radius: 15,                        backgroundColor: ShopCubit.get(context).favorites[model.id] ?? false ? defaultColor : Colors.grey,                        child: const Icon(                        Icons.favorite_border,                      size: 20,                          color: Colors.white,                    )),                ),              ],            ),          ],        ),      ),    ],  )  );  Widget buildCategoryItem(DataModel model) => Stack(    alignment: AlignmentDirectional.bottomCenter,    children:    [      Image(        image: NetworkImage('${model.image}'),        height: 100,        width: 100,        fit: BoxFit.cover,      ),      Container(        color: Colors.black.withOpacity(0.8),        child: Text(          '${model.name}',          textAlign: TextAlign.center,          maxLines: 1,          overflow: TextOverflow.ellipsis,          style: TextStyle(            color: Colors.white,          ),        ),      ),    ],  );}